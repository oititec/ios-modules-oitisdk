// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name OitiComponents
import AVFoundation
import CoreGraphics
import CoreText
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit.UIButton
import UIKit.UIColor
import UIKit.UIImage
import UIKit
import UIKit.UIView
import UIKit.UIViewController
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_spi(OitiOnly) public struct ActivityIndicatorConfiguration : OitiComponents.LoadingViewConfigurationProtocol {
  @_spi(OitiOnly) public let loadingType: OitiComponents.LoadingTypes
  @_spi(OitiOnly) public let loadingColor: UIKit.UIColor
  @_spi(OitiOnly) public let backgroundColor: UIKit.UIColor
  @_spi(OitiOnly) public let scaleFactor: Swift.Int
  @_spi(OitiOnly) public init(loadingColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, scaleFactor: Swift.Int)
  @_spi(OitiOnly) public func createLoadingView() -> UIKit.UIView
}
@_spi(OitiOnly) @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BaseFieldComponent : UIKit.UIView {
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public init(model: OitiComponents.BaseFieldModel)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func disable()
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func enable()
  @_spi(OitiOnly) @discardableResult
  @_Concurrency.MainActor(unsafe) public func showWarning(withText text: Swift.String) -> Swift.Bool
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func showOffWarning()
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func canShowWarning() -> Swift.Bool
  @_spi(OitiOnly) @objc deinit
}
@_spi(OitiOnly) public struct BaseFieldModel {
  @_spi(OitiOnly) public var label: Swift.String
  @_spi(OitiOnly) public var size: OitiComponents.TextFieldComponentSize
  @_spi(OitiOnly) public var icon: OitiComponents.ComponentIcon
}
@_spi(OitiOnly) @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ButtonComponent : UIKit.UIButton {
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public var isLoading: Swift.Bool {
    @_spi(OitiOnly) get
    @_spi(OitiOnly) set
  }
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public init(model: OitiComponents.ButtonComponentModel, identifier: Swift.String? = nil)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func changeTitle(to newTitle: Swift.String)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_spi(OitiOnly) @objc deinit
}
public protocol ButtonLayoutContraintsModel {
  var heightValue: CoreFoundation.CGFloat { get }
  func layout(_ view: UIKit.UIView, superview: UIKit.UIView, spacing: CoreFoundation.CGFloat)
  func layoutSquare(_ view: UIKit.UIView)
  func layoutFont(titleLabel: UIKit.UILabel)
  func layoutIcon(iconImage: UIKit.UIImageView, uiView: UIKit.UIView)
}
@_spi(OitiOnly) public struct ButtonComponentModel {
  @_spi(OitiOnly) public init(title: Swift.String? = nil, titleFont: UIKit.UIFont? = nil, type: OitiComponents.ButtonComponentType = .complex, size: OitiComponents.ComponentSize, icon: OitiComponents.ComponentIcon, loadingIcon: UIKit.UIImage? = nil, highlightedStyle: OitiComponents.ButtonComponentStyles, normalStyle: OitiComponents.ButtonComponentStyles, disabledStyle: OitiComponents.ButtonComponentStyles)
}
@_spi(OitiOnly) public struct ButtonComponentAppearance {
  @_spi(OitiOnly) public let backgroundColor: UIKit.UIColor
  @_spi(OitiOnly) public let borderColor: UIKit.UIColor
  @_spi(OitiOnly) public let contentColor: UIKit.UIColor
  @_spi(OitiOnly) public init(backgroundColor: UIKit.UIColor, borderColor: UIKit.UIColor, contentColor: UIKit.UIColor)
}
public enum ButtonComponentType {
  case simple
  case complex
  public static func == (a: OitiComponents.ButtonComponentType, b: OitiComponents.ButtonComponentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_spi(OitiOnly) public enum ButtonComponentStyles {
  @_spi(OitiOnly) case clear
  @_spi(OitiOnly) case custom(OitiComponents.ButtonComponentAppearance)
  @_spi(OitiOnly) case standardPrimaryHightlithed
  @_spi(OitiOnly) case standardPrimaryNormal
  @_spi(OitiOnly) case standardPrimaryDisabled
  @_spi(OitiOnly) case standardSecondaryHightlithed
  @_spi(OitiOnly) case standardSecondaryNormal
  @_spi(OitiOnly) case standardSecondaryDisabled
  @_spi(OitiOnly) case standardGhostHightlithed
  @_spi(OitiOnly) case standardGhostHover
  @_spi(OitiOnly) case standardGhostNormal
  @_spi(OitiOnly) case standardGhostDisabled
  @_spi(OitiOnly) case onColorPrimaryHightlithed
  @_spi(OitiOnly) case onColorPrimaryNormal
  @_spi(OitiOnly) case onColorPrimaryDisabled
  @_spi(OitiOnly) case onColorSecondaryHightlithed
  @_spi(OitiOnly) case onColorSecondaryNormal
  @_spi(OitiOnly) case onColorSecondaryDisabled
  @_spi(OitiOnly) case onColorGhostHightlithed
  @_spi(OitiOnly) case onColorGhostNormal
  @_spi(OitiOnly) case onColorGhostDisabled
  @_spi(OitiOnly) public var appearance: OitiComponents.ButtonComponentAppearance {
    @_spi(OitiOnly) get
  }
}
@_spi(OitiOnly) extension CoreFoundation.CGFloat {
  @_spi(OitiOnly) public static func widthValue(_ value: CoreFoundation.CGFloat, from frame: CoreFoundation.CGRect? = nil) -> CoreFoundation.CGFloat
  @_spi(OitiOnly) public static func heightValue(_ value: CoreFoundation.CGFloat, from frame: CoreFoundation.CGRect? = nil) -> CoreFoundation.CGFloat
  @_spi(OitiOnly) public static func widthMultiplier(to value: CoreFoundation.CGFloat, from frame: CoreFoundation.CGRect? = nil) -> CoreFoundation.CGFloat
  @_spi(OitiOnly) public static func heightMultiplier(to value: CoreFoundation.CGFloat, from frame: CoreFoundation.CGRect? = nil) -> CoreFoundation.CGFloat
}
@_spi(OitiOnly) public enum CharacterType : Swift.CaseIterable {
  @_spi(OitiOnly) case letter
  @_spi(OitiOnly) case whitespace
  @_spi(OitiOnly) case number
  @_spi(OitiOnly) case symbol
  @_spi(OitiOnly) case punctuation
  @_spi(OitiOnly) case emailSymbol
  @_spi(OitiOnly) case dotSymbol
  @_spi(OitiOnly) case any
  @_spi(OitiOnly) public static func == (a: OitiComponents.CharacterType, b: OitiComponents.CharacterType) -> Swift.Bool
  @_spi(OitiOnly) public func hash(into hasher: inout Swift.Hasher)
  @_spi(OitiOnly) public typealias AllCases = [OitiComponents.CharacterType]
  @_spi(OitiOnly) public static var allCases: [OitiComponents.CharacterType] {
    @_spi(OitiOnly) get
  }
  @_spi(OitiOnly) public var hashValue: Swift.Int {
    @_spi(OitiOnly) get
  }
}
@_spi(OitiOnly) public protocol CheckCameraPermissionDelegate : AnyObject {
  @_spi(OitiOnly) func checkCameraPermission(continueFrom cameraPermissionVC: UIKit.UIViewController)
  @_spi(OitiOnly) func checkCameraPermission(close cameraPermissionVC: UIKit.UIViewController)
}
@_spi(OitiOnly) public protocol CheckCameraPermissionTrackerDelegate : AnyObject {
  @_spi(OitiOnly) func trackViewDidAppear()
  @_spi(OitiOnly) func trackGoBackAction()
  @_spi(OitiOnly) func trackCheckPermissionAction()
  @_spi(OitiOnly) func trackGoToSettingsAction()
  @_spi(OitiOnly) func trackCloseAction()
}
@_spi(OitiOnly) @objc @_Concurrency.MainActor(unsafe) public class CheckCameraPermissionViewController : UIKit.UIViewController {
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) weak public var delegate: (any OitiComponents.CheckCameraPermissionDelegate)?
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) weak public var trackerDelegate: (any OitiComponents.CheckCameraPermissionTrackerDelegate)?
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public init(customizationProperties: OitiComponents.CheckCameraPermissionViewProperties = .init(), customView: (any OitiComponents.CustomCameraPermissionView)? = nil)
  @_spi(OitiOnly) @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_spi(OitiOnly) @objc deinit
}
@_spi(OitiOnly) public struct CheckCameraPermissionViewProperties {
  @_spi(OitiOnly) public var backButtonIcon: UIKit.UIImage?
  @_spi(OitiOnly) public var backButtonNormalStyle: OitiComponents.ButtonComponentStyles
  @_spi(OitiOnly) public var cameraImage: UIKit.UIImage?
  @_spi(OitiOnly) public var cameraImageColor: UIKit.UIColor
  @_spi(OitiOnly) public var title: Swift.String
  @_spi(OitiOnly) public var titleColor: UIKit.UIColor
  @_spi(OitiOnly) public var titleFont: UIKit.UIFont
  @_spi(OitiOnly) public var caption: Swift.String
  @_spi(OitiOnly) public var captionColor: UIKit.UIColor
  @_spi(OitiOnly) public var captionFont: UIKit.UIFont
  @_spi(OitiOnly) public var checkPermissionButtonText: Swift.String
  @_spi(OitiOnly) public var checkPermissionButtonTextFont: UIKit.UIFont
  @_spi(OitiOnly) public var checkPermissionButtonHighlightedStyle: OitiComponents.ButtonComponentStyles
  @_spi(OitiOnly) public var checkPermissionButtonNormalStyle: OitiComponents.ButtonComponentStyles
  @_spi(OitiOnly) public var checkPermissionButtonDisabledStyle: OitiComponents.ButtonComponentStyles
  @_spi(OitiOnly) public var backgroundColor: UIKit.UIColor
  @_spi(OitiOnly) public var bottomSheetCornerRadius: CoreFoundation.CGFloat
  @_spi(OitiOnly) public var bottomSheetColor: UIKit.UIColor
  @_spi(OitiOnly) public var bottomSheetTitle: Swift.String
  @_spi(OitiOnly) public var bottomSheetTitleColor: UIKit.UIColor
  @_spi(OitiOnly) public var bottomSheetTitleFont: UIKit.UIFont
  @_spi(OitiOnly) public var bottomSheetCaption: Swift.String
  @_spi(OitiOnly) public var bottomSheetCaptionFont: UIKit.UIFont
  @_spi(OitiOnly) public var bottomSheetCaptionColor: UIKit.UIColor
  @_spi(OitiOnly) public var openSettingsButtonText: Swift.String
  @_spi(OitiOnly) public var openSettingsButtonTextFont: UIKit.UIFont
  @_spi(OitiOnly) public var openSettingsButtonHighlightedStyle: OitiComponents.ButtonComponentStyles
  @_spi(OitiOnly) public var openSettingsButtonNormalStyle: OitiComponents.ButtonComponentStyles
  @_spi(OitiOnly) public var openSettingsButtonDisabledStyle: OitiComponents.ButtonComponentStyles
  @_spi(OitiOnly) public var closeButtonText: Swift.String
  @_spi(OitiOnly) public var closeButtonTextFont: UIKit.UIFont
  @_spi(OitiOnly) public var closeButtonHighlightedStyle: OitiComponents.ButtonComponentStyles
  @_spi(OitiOnly) public var closeButtonNormalStyle: OitiComponents.ButtonComponentStyles
  @_spi(OitiOnly) public var closeButtonDisabledStyle: OitiComponents.ButtonComponentStyles
  @_spi(OitiOnly) public var accessibilityLabelBackButton: Swift.String
  @_spi(OitiOnly) public var accessibilityLabelCheckPermissionButton: Swift.String
  @_spi(OitiOnly) public var accessibilityLabelOpenSettingsButton: Swift.String
  @_spi(OitiOnly) public var accessibilityLabelCloseButton: Swift.String
  @_spi(OitiOnly) public init()
}
@_spi(OitiOnly) @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CheckboxComponent : UIKit.UIView {
  @_spi(OitiOnly) public typealias OnChangeValueHandler = (Swift.Bool) -> Swift.Void
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public init(label: Swift.String, checkIcon: UIKit.UIImage?)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func setSelected(_ value: Swift.Bool)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func setDisabled(_ value: Swift.Bool)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func onChangeValue(handler: @escaping OitiComponents.CheckboxComponent.OnChangeValueHandler)
  @_spi(OitiOnly) @objc deinit
}
@_spi(OitiOnly) public enum ComponentIcon {
  @_spi(OitiOnly) case none
  @_spi(OitiOnly) case has(UIKit.UIImage?)
}
@_spi(OitiOnly) public enum ComponentSize {
  @_spi(OitiOnly) case ultraLarge
  @_spi(OitiOnly) case large
  @_spi(OitiOnly) case medium
  @_spi(OitiOnly) case small
  @_spi(OitiOnly) public static func == (a: OitiComponents.ComponentSize, b: OitiComponents.ComponentSize) -> Swift.Bool
  @_spi(OitiOnly) public func hash(into hasher: inout Swift.Hasher)
  @_spi(OitiOnly) public var hashValue: Swift.Int {
    @_spi(OitiOnly) get
  }
}
@_spi(OitiOnly) extension OitiComponents.ConstraintBuilder {
  @_spi(OitiOnly) public func bottom(anchor uiViewAnchor: UIKit.NSLayoutYAxisAnchor, padding: CoreFoundation.CGFloat = 0.0) -> OitiComponents.ConstraintBuilder
  @_spi(OitiOnly) public func bottom(anchor uiViewAnchor: UIKit.UIView, padding: CoreFoundation.CGFloat = 0.0) -> OitiComponents.ConstraintBuilder
  @_spi(OitiOnly) public func bottom(anchor layoutGuide: UIKit.UILayoutGuide, padding: CoreFoundation.CGFloat = 0.0) -> OitiComponents.ConstraintBuilder
}
@_spi(OitiOnly) extension OitiComponents.ConstraintBuilder {
  @_spi(OitiOnly) public func centerX(anchor uiViewAnchor: UIKit.NSLayoutXAxisAnchor, padding: CoreFoundation.CGFloat = 0.0) -> OitiComponents.ConstraintBuilder
  @_spi(OitiOnly) public func centerX(anchor uiViewAnchor: UIKit.UIView, padding: CoreFoundation.CGFloat = 0.0) -> OitiComponents.ConstraintBuilder
}
@_spi(OitiOnly) extension OitiComponents.ConstraintBuilder {
  @_spi(OitiOnly) public func centerY(anchor uiViewAnchor: UIKit.NSLayoutYAxisAnchor, padding: CoreFoundation.CGFloat = 0.0) -> OitiComponents.ConstraintBuilder
  @_spi(OitiOnly) public func centerY(anchor uiViewAnchor: UIKit.UIView, padding: CoreFoundation.CGFloat = 0.0) -> OitiComponents.ConstraintBuilder
}
@_spi(OitiOnly) extension OitiComponents.ConstraintBuilder {
  @_spi(OitiOnly) public func height(anchor uiViewAnchor: UIKit.NSLayoutDimension, multiplier: CoreFoundation.CGFloat = 1.0) -> OitiComponents.ConstraintBuilder
  @_spi(OitiOnly) public func height(anchor uiViewAnchor: UIKit.UIView, multiplier: CoreFoundation.CGFloat = 1.0) -> OitiComponents.ConstraintBuilder
  @_spi(OitiOnly) public func height(constant: CoreFoundation.CGFloat) -> OitiComponents.ConstraintBuilder
}
@_spi(OitiOnly) extension OitiComponents.ConstraintBuilder {
  @_spi(OitiOnly) public func leading(anchor uiViewAnchor: UIKit.NSLayoutXAxisAnchor, padding: CoreFoundation.CGFloat = 0.0) -> OitiComponents.ConstraintBuilder
  @_spi(OitiOnly) public func leading(anchor uiViewAnchor: UIKit.UIView, padding: CoreFoundation.CGFloat = 0.0) -> OitiComponents.ConstraintBuilder
  @_spi(OitiOnly) public func leading(anchor layoutGuide: UIKit.UILayoutGuide, padding: CoreFoundation.CGFloat = 0.0) -> OitiComponents.ConstraintBuilder
}
@_spi(OitiOnly) extension OitiComponents.ConstraintBuilder {
  @_spi(OitiOnly) public func top(anchor uiViewAnchor: UIKit.NSLayoutYAxisAnchor, padding: CoreFoundation.CGFloat = 0.0) -> OitiComponents.ConstraintBuilder
  @_spi(OitiOnly) public func top(anchor uiView: UIKit.UIView, padding: CoreFoundation.CGFloat = 0.0) -> OitiComponents.ConstraintBuilder
  @_spi(OitiOnly) public func top(anchor layoutGuide: UIKit.UILayoutGuide, padding: CoreFoundation.CGFloat = 0.0) -> OitiComponents.ConstraintBuilder
}
@_spi(OitiOnly) extension OitiComponents.ConstraintBuilder {
  @_spi(OitiOnly) public func trailing(anchor uiViewAnchor: UIKit.NSLayoutXAxisAnchor, padding: CoreFoundation.CGFloat = 0.0) -> OitiComponents.ConstraintBuilder
  @_spi(OitiOnly) public func trailing(anchor uiViewAnchor: UIKit.UIView, padding: CoreFoundation.CGFloat = 0.0) -> OitiComponents.ConstraintBuilder
  @_spi(OitiOnly) public func trailing(anchor layoutGuide: UIKit.UILayoutGuide, padding: CoreFoundation.CGFloat = 0.0) -> OitiComponents.ConstraintBuilder
}
@_spi(OitiOnly) extension OitiComponents.ConstraintBuilder {
  @_spi(OitiOnly) public func width(anchor uiViewAnchor: UIKit.NSLayoutDimension, multiplier: CoreFoundation.CGFloat = 1.0) -> OitiComponents.ConstraintBuilder
  @_spi(OitiOnly) public func width(anchor uiViewAnchor: UIKit.UIView, multiplier: CoreFoundation.CGFloat = 1.0) -> OitiComponents.ConstraintBuilder
  @_spi(OitiOnly) public func width(constant: CoreFoundation.CGFloat) -> OitiComponents.ConstraintBuilder
}
@_spi(OitiOnly) public class ConstraintBuilder {
  @_spi(OitiOnly) public init(_ view: UIKit.UIView)
  @_spi(OitiOnly) public func constraintReference(_ constraintReference: inout UIKit.NSLayoutConstraint) -> OitiComponents.ConstraintBuilder
  @_spi(OitiOnly) public func build()
  @_spi(OitiOnly) @objc deinit
}
public protocol CustomCameraPermissionView : UIKit.UIView {
  var backButton: UIKit.UIButton! { get }
  var checkPermissionButton: UIKit.UIButton! { get }
  var openSettingsButton: UIKit.UIButton! { get }
  var closeButton: UIKit.UIButton! { get }
  func showBottomSheet(visibility: OitiComponents.Visibility)
}
@_spi(OitiOnly) @objc @_Concurrency.MainActor(unsafe) public class CustomShape : UIKit.UIView {
  @_spi(OitiOnly) public typealias ShapeBuilder = (_ shape: UIKit.UIView, _ rect: CoreFoundation.CGRect) -> Swift.Void
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public var path: UIKit.UIBezierPath?
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public init(shapeBuilder: @escaping OitiComponents.CustomShape.ShapeBuilder)
  @_spi(OitiOnly) @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_spi(OitiOnly) @objc deinit
}
@_spi(OitiOnly) extension OitiComponents.DesignTokens {
  @_spi(OitiOnly) public enum BorderWidth {
    @_spi(OitiOnly) public static let none: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let hairline: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let thin: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let thick: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let heavy: CoreFoundation.CGFloat
  }
}
@_spi(OitiOnly) extension OitiComponents.DesignTokens {
  @_spi(OitiOnly) public enum Color {
    @_spi(OitiOnly) public enum Brand {
      @_spi(OitiOnly) public enum Primary {
        @_spi(OitiOnly) public static let pure: UIKit.UIColor
        @_spi(OitiOnly) public static let light: UIKit.UIColor
        @_spi(OitiOnly) public static let medium: UIKit.UIColor
        @_spi(OitiOnly) public static let dark: UIKit.UIColor
      }
      @_spi(OitiOnly) public enum Secondary {
        @_spi(OitiOnly) public static let pure: UIKit.UIColor
        @_spi(OitiOnly) public static let light: UIKit.UIColor
        @_spi(OitiOnly) public static let medium: UIKit.UIColor
        @_spi(OitiOnly) public static let dark: UIKit.UIColor
      }
      @_spi(OitiOnly) public enum Tertiary {
        @_spi(OitiOnly) public static let pure: UIKit.UIColor
        @_spi(OitiOnly) public static let light: UIKit.UIColor
        @_spi(OitiOnly) public static let medium: UIKit.UIColor
        @_spi(OitiOnly) public static let dark: UIKit.UIColor
      }
    }
    @_spi(OitiOnly) public enum Highlight {
      @_spi(OitiOnly) public static let pure: UIKit.UIColor
      @_spi(OitiOnly) public static let light: UIKit.UIColor
      @_spi(OitiOnly) public static let medium: UIKit.UIColor
      @_spi(OitiOnly) public static let dark: UIKit.UIColor
    }
    @_spi(OitiOnly) public enum Neutral {
      @_spi(OitiOnly) public enum Low {
        @_spi(OitiOnly) public static let pure: UIKit.UIColor
        @_spi(OitiOnly) public static let light: UIKit.UIColor
        @_spi(OitiOnly) public static let medium: UIKit.UIColor
        @_spi(OitiOnly) public static let dark: UIKit.UIColor
      }
      @_spi(OitiOnly) public enum High {
        @_spi(OitiOnly) public static let pure: UIKit.UIColor
        @_spi(OitiOnly) public static let light: UIKit.UIColor
        @_spi(OitiOnly) public static let medium: UIKit.UIColor
        @_spi(OitiOnly) public static let dark: UIKit.UIColor
      }
    }
    @_spi(OitiOnly) public enum Feedback {
      @_spi(OitiOnly) public enum Warning {
        @_spi(OitiOnly) public static let pure: UIKit.UIColor
        @_spi(OitiOnly) public static let light: UIKit.UIColor
        @_spi(OitiOnly) public static let medium: UIKit.UIColor
        @_spi(OitiOnly) public static let dark: UIKit.UIColor
      }
      @_spi(OitiOnly) public enum Helper {
        @_spi(OitiOnly) public static let pure: UIKit.UIColor
        @_spi(OitiOnly) public static let light: UIKit.UIColor
        @_spi(OitiOnly) public static let medium: UIKit.UIColor
        @_spi(OitiOnly) public static let dark: UIKit.UIColor
      }
      @_spi(OitiOnly) public enum Success {
        @_spi(OitiOnly) public static let pure: UIKit.UIColor
        @_spi(OitiOnly) public static let light: UIKit.UIColor
        @_spi(OitiOnly) public static let medium: UIKit.UIColor
        @_spi(OitiOnly) public static let dark: UIKit.UIColor
      }
    }
  }
}
@_spi(OitiOnly) extension OitiComponents.DesignTokens {
  @_spi(OitiOnly) public enum CornerRadius {
    @_spi(OitiOnly) public static let none: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let sm: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let md: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let lg: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let pill: CoreFoundation.CGFloat
  }
}
@_spi(OitiOnly) extension OitiComponents.DesignTokens {
  @_spi(OitiOnly) @_hasMissingDesignatedInitializers public class Font {
    @_spi(OitiOnly) public enum Highlight {
      @_spi(OitiOnly) public static func regular(size: OitiComponents.DesignTokens.Font.Size) -> UIKit.UIFont
      @_spi(OitiOnly) public static func medium(size: OitiComponents.DesignTokens.Font.Size) -> UIKit.UIFont
      @_spi(OitiOnly) public static func bold(size: OitiComponents.DesignTokens.Font.Size) -> UIKit.UIFont
    }
    @_spi(OitiOnly) public enum Base {
      @_spi(OitiOnly) public static func regular(size: OitiComponents.DesignTokens.Font.Size) -> UIKit.UIFont
      @_spi(OitiOnly) public static func medium(size: OitiComponents.DesignTokens.Font.Size) -> UIKit.UIFont
      @_spi(OitiOnly) public static func bold(size: OitiComponents.DesignTokens.Font.Size) -> UIKit.UIFont
    }
    @_spi(OitiOnly) @objc deinit
  }
}
@_spi(OitiOnly) extension OitiComponents.DesignTokens.Font {
  @_spi(OitiOnly) public enum Size {
    @_spi(OitiOnly) case xxs
    @_spi(OitiOnly) case xs
    @_spi(OitiOnly) case sm
    @_spi(OitiOnly) case md
    @_spi(OitiOnly) case lg
    @_spi(OitiOnly) case hxs
    @_spi(OitiOnly) case hsm
    @_spi(OitiOnly) case hmd
    @_spi(OitiOnly) case hlg
    @_spi(OitiOnly) case hxl
    @_spi(OitiOnly) case display
    @_spi(OitiOnly) case giant
    @_spi(OitiOnly) public static func == (a: OitiComponents.DesignTokens.Font.Size, b: OitiComponents.DesignTokens.Font.Size) -> Swift.Bool
    @_spi(OitiOnly) public func hash(into hasher: inout Swift.Hasher)
    @_spi(OitiOnly) public var hashValue: Swift.Int {
      @_spi(OitiOnly) get
    }
  }
}
@_spi(OitiOnly) extension OitiComponents.DesignTokens {
  @_spi(OitiOnly) public enum OpacityLevel {
    @_spi(OitiOnly) public static let semiOpaque: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let intense: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let medium: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let light: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let semiTransparent: CoreFoundation.CGFloat
  }
}
@_spi(OitiOnly) extension OitiComponents.DesignTokens {
  @_spi(OitiOnly) public struct Shadow {
    @_spi(OitiOnly) public static let level1: OitiComponents.DesignTokens.Shadow
    @_spi(OitiOnly) public static let level2: OitiComponents.DesignTokens.Shadow
    @_spi(OitiOnly) public static let level3: OitiComponents.DesignTokens.Shadow
    @_spi(OitiOnly) public static let level4: OitiComponents.DesignTokens.Shadow
  }
}
@_spi(OitiOnly) extension OitiComponents.DesignTokens {
  @_spi(OitiOnly) public enum Spacing {
    @_spi(OitiOnly) public static let quarck: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let nano: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let xxxs: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let xxs: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let xs: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let sm: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let md: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let lg: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let xl: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let xxl: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let xxxl: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let huge: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let giant: CoreFoundation.CGFloat
  }
}
@_spi(OitiOnly) extension OitiComponents.DesignTokens {
  @_spi(OitiOnly) public enum SpacingInset {
    @_spi(OitiOnly) public static let quarck: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let nano: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let xs: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let sm: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let md: CoreFoundation.CGFloat
    @_spi(OitiOnly) public static let lg: CoreFoundation.CGFloat
  }
}
@_spi(OitiOnly) public enum DesignTokens {
}
@_spi(OitiOnly) @_hasMissingDesignatedInitializers public class FontUtil {
  @_spi(OitiOnly) public static func registerFonts()
  @_spi(OitiOnly) @objc deinit
}
@_spi(OitiOnly) @objc @_Concurrency.MainActor(unsafe) public class HybridLoadingView : UIKit.UIView {
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public init(appearance: OitiComponents.HybridViewAppearance, accessibilityLabel: Swift.String? = nil)
  @_spi(OitiOnly) @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_spi(OitiOnly) @objc deinit
}
public struct HybridViewAppearance {
  public init(configuration: any OitiComponents.LoadingViewConfigurationProtocol)
}
@_spi(OitiOnly) public struct InstructionsModel {
  @_spi(OitiOnly) public let mainImage: UIKit.UIImage?
  @_spi(OitiOnly) public let title: Swift.String
  @_spi(OitiOnly) public let caption: Swift.String
  @_spi(OitiOnly) public init(mainImage: UIKit.UIImage?, title: Swift.String, caption: Swift.String)
}
@_spi(OitiOnly) @objc @_Concurrency.MainActor(unsafe) open class InstructionsView : UIKit.UIView {
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) final public let backSquareButton: OitiComponents.SquareButtonComponent
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public init(model: OitiComponents.InstructionsModel)
  @_spi(OitiOnly) @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) open func setupExtraViews() -> UIKit.UIView
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) open func setupConstraintsOfExtraViews()
  @_spi(OitiOnly) @objc deinit
}
@_spi(OitiOnly) @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LinkComponent : UIKit.UIButton {
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public init(model: OitiComponents.LinkComponentModel)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_spi(OitiOnly) @objc deinit
}
@_spi(OitiOnly) public enum LinkComponentStyles {
  @_spi(OitiOnly) case standardNormal
  @_spi(OitiOnly) case standardHightlithed
  @_spi(OitiOnly) case onColorNormal
  @_spi(OitiOnly) case onColorHightlithed
  @_spi(OitiOnly) public static func == (a: OitiComponents.LinkComponentStyles, b: OitiComponents.LinkComponentStyles) -> Swift.Bool
  @_spi(OitiOnly) public func hash(into hasher: inout Swift.Hasher)
  @_spi(OitiOnly) public var hashValue: Swift.Int {
    @_spi(OitiOnly) get
  }
}
@_spi(OitiOnly) public protocol LinkLayoutContraintsModel {
  @_spi(OitiOnly) var fontSize: OitiComponents.DesignTokens.Font.Size { get }
  @_spi(OitiOnly) var iconMultiplier: CoreFoundation.CGFloat { get }
  @_spi(OitiOnly) var componentHeight: CoreFoundation.CGFloat { get }
  @_spi(OitiOnly) var verticalPadding: CoreFoundation.CGFloat { get }
}
@_spi(OitiOnly) public struct LinkComponentModel {
  @_spi(OitiOnly) public init(text: Swift.String, icon: OitiComponents.ComponentIcon, size: OitiComponents.ComponentSize, normalStyle: OitiComponents.LinkComponentStyles, highlightedStyle: OitiComponents.LinkComponentStyles)
}
@_spi(OitiOnly) public enum LoadingTypes {
  @_spi(OitiOnly) case activityIndicator
  @_spi(OitiOnly) case spinner
  @_spi(OitiOnly) public static func == (a: OitiComponents.LoadingTypes, b: OitiComponents.LoadingTypes) -> Swift.Bool
  @_spi(OitiOnly) public func hash(into hasher: inout Swift.Hasher)
  @_spi(OitiOnly) public var hashValue: Swift.Int {
    @_spi(OitiOnly) get
  }
}
public protocol LoadingViewConfigurationProtocol {
  var backgroundColor: UIKit.UIColor { get }
  func createLoadingView() -> UIKit.UIView
}
@_spi(OitiOnly) @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class OitiHeaderComponent : UIKit.UIView {
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public var optionsAction: () -> Swift.Void
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) final public let optionsButtonIdentifier: Swift.String
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public init(model: OitiComponents.OitiHeaderComponentModel)
  @_spi(OitiOnly) @objc deinit
}
@_spi(OitiOnly) public struct OitiHeaderComponentModel {
  @_spi(OitiOnly) public init(oitiLogoImage: UIKit.UIImage?, optionsImage: UIKit.UIImage?, optionsButtonIdentifier: Swift.String)
}
@_spi(OitiOnly) extension Swift.Optional where Wrapped == OitiComponents.HybridViewAppearance {
  @_spi(OitiOnly) public func orDefault() -> OitiComponents.HybridViewAppearance
}
@_spi(OitiOnly) @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class RadioButtonComponent : OitiComponents.CheckboxComponent {
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) override public init(label: Swift.String, checkIcon: UIKit.UIImage?)
  @_spi(OitiOnly) @objc deinit
}
@_spi(OitiOnly) @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SearchFieldComponent : UIKit.UIView, UIKit.UITextFieldDelegate {
  @_spi(OitiOnly) public typealias SearchHandler = (_ component: OitiComponents.SearchFieldComponent, _ searchText: Swift.String) -> Swift.Void
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc override dynamic public var isFocused: Swift.Bool {
    @_spi(OitiOnly) @objc get
    @_spi(OitiOnly) @objc set
  }
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public init(model: OitiComponents.SearchFieldComponentModel)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func onSearchSubmit(handler: @escaping OitiComponents.SearchFieldComponent.SearchHandler)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func onValueChange(handler: @escaping OitiComponents.SearchFieldComponent.SearchHandler)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func onSearchReturn(handler: @escaping OitiComponents.SearchFieldComponent.SearchHandler)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func setEnabled(_ enabledValue: Swift.Bool)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc public func textFieldDidChangeSelection(_ textField: UIKit.UITextField)
  @_spi(OitiOnly) @objc deinit
}
@_spi(OitiOnly) public struct SearchFieldComponentModel {
  @_spi(OitiOnly) public init(searchImage: UIKit.UIImage?, cancelImage: UIKit.UIImage?, hasButton: Swift.Bool, placeholder: Swift.String)
  @_spi(OitiOnly) public init(searchImage: UIKit.UIImage?, cancelImage: UIKit.UIImage?, hasButton: Swift.Bool)
}
@_spi(OitiOnly) @objc @_Concurrency.MainActor(unsafe) public class SecureTextFieldComponent : OitiComponents.BaseFieldComponent, UIKit.UITextFieldDelegate {
  @_spi(OitiOnly) public typealias ValueChangeHandler = (_ component: OitiComponents.SecureTextFieldComponent, _ value: Swift.String) -> Swift.Void
  @_spi(OitiOnly) public typealias LostFocusHandler = (_ component: OitiComponents.SecureTextFieldComponent, _ value: Swift.String) -> Swift.Void
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc override dynamic public var isFocused: Swift.Bool {
    @_spi(OitiOnly) @objc get
    @_spi(OitiOnly) @objc set
  }
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public var textFieldValue: Swift.String {
    @_spi(OitiOnly) get
  }
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public init(model: OitiComponents.TextFieldComponentModel, iconVisibilityOn: UIKit.UIImage?, iconVisibilityOff: UIKit.UIImage?)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) override public func disable()
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) override public func enable()
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) override public func canShowWarning() -> Swift.Bool
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func onValueChange(handler: @escaping OitiComponents.SecureTextFieldComponent.ValueChangeHandler)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func onLostFocus(handler: @escaping OitiComponents.SecureTextFieldComponent.LostFocusHandler)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func clear()
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc public func textFieldDidChangeSelection(_ textField: UIKit.UITextField)
  @_spi(OitiOnly) @objc deinit
}
@_spi(OitiOnly) @objc @_Concurrency.MainActor(unsafe) public class SelectComponent : OitiComponents.BaseFieldComponent {
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public init(model: OitiComponents.BaseFieldModel, downIcon: UIKit.UIImage?)
  @_spi(OitiOnly) @objc deinit
}
@_spi(OitiOnly) public struct SpinnerConfiguration : OitiComponents.LoadingViewConfigurationProtocol {
  @_spi(OitiOnly) public let backgroundColor: UIKit.UIColor
  @_spi(OitiOnly) public let loadingType: OitiComponents.LoadingTypes
  @_spi(OitiOnly) public let loadingColor: UIKit.UIColor
  @_spi(OitiOnly) public let strokeWidth: CoreFoundation.CGFloat
  @_spi(OitiOnly) public let scaleFactor: Swift.Int
  @_spi(OitiOnly) public init(backgroundColor: UIKit.UIColor, loadingColor: UIKit.UIColor, strokeWidth: CoreFoundation.CGFloat, scaleFactor: Swift.Int)
  @_spi(OitiOnly) public func createLoadingView() -> UIKit.UIView
}
@_spi(OitiOnly) @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SquareButtonComponent : OitiComponents.ButtonComponent {
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func layoutForSuperview(_ superview: UIKit.UIView, with layoutContraintModel: any OitiComponents.ButtonLayoutContraintsModel)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) override public init(model: OitiComponents.ButtonComponentModel, identifier: Swift.String? = nil)
  @_spi(OitiOnly) @objc deinit
}
@_spi(OitiOnly) @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SwitchComponent : UIKit.UIView {
  @_spi(OitiOnly) public typealias ValueChangedHandler = (_ value: Swift.Bool) -> Swift.Void
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public var isDisabled: Swift.Bool {
    @_spi(OitiOnly) get
    @_spi(OitiOnly) set
  }
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public var isSelected: Swift.Bool {
    @_spi(OitiOnly) get
  }
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func setSelected(to value: Swift.Bool)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func addObserverToValueChanged(handler: @escaping OitiComponents.SwitchComponent.ValueChangedHandler)
  @_spi(OitiOnly) @objc deinit
}
@_spi(OitiOnly) @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TextAreaComponent : UIKit.UIView, UIKit.UITextViewDelegate {
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc override dynamic public var isFocused: Swift.Bool {
    @_spi(OitiOnly) @objc get
    @_spi(OitiOnly) @objc set
  }
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public var textAreaValue: Swift.String {
    @_spi(OitiOnly) get
  }
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public var observeValueChanges: (Swift.String, Swift.String) -> Swift.Void
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public init(model: OitiComponents.TextFieldComponentModel)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func disable()
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func enable()
  @_spi(OitiOnly) @discardableResult
  @_Concurrency.MainActor(unsafe) public func showWarning(withText text: Swift.String) -> Swift.Bool
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func showOffWarning()
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_spi(OitiOnly) @objc deinit
}
@_spi(OitiOnly) @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TextFieldComponent : UIKit.UIView, UIKit.UITextFieldDelegate {
  @_spi(OitiOnly) public typealias ObserveValueChangesHandler = (_ value: Swift.String, _ rawValue: Swift.String) -> Swift.Void
  @_spi(OitiOnly) public typealias LostFocusHandler = (_ component: OitiComponents.TextFieldComponent, _ value: Swift.String, _ rawValue: Swift.String) -> Swift.Void
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc override dynamic public var isFocused: Swift.Bool {
    @_spi(OitiOnly) @objc get
    @_spi(OitiOnly) @objc set
  }
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public var textFieldValue: Swift.String {
    @_spi(OitiOnly) get
  }
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public var textFieldRawValue: Swift.String {
    @_spi(OitiOnly) get
  }
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public init(model: OitiComponents.TextFieldComponentModel)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func disable()
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func enable()
  @_spi(OitiOnly) @discardableResult
  @_Concurrency.MainActor(unsafe) public func showWarning(withText text: Swift.String) -> Swift.Bool
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func showOffWarning()
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func addObserveValueChangesAction(handler: @escaping OitiComponents.TextFieldComponent.ObserveValueChangesHandler)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func addOnLostFocusAction(handler: @escaping OitiComponents.TextFieldComponent.LostFocusHandler)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func setText(_ text: Swift.String)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func clear()
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) @objc public func textFieldDidChangeSelection(_ textField: UIKit.UITextField)
  @_spi(OitiOnly) @objc deinit
}
@_spi(OitiOnly) public struct TextFieldComponentModel {
  @_spi(OitiOnly) public init(label: Swift.String, placeholder: Swift.String, icon: OitiComponents.ComponentIcon, size: OitiComponents.TextFieldComponentSize, masks: [Swift.String] = [], acceptedCharacters: [OitiComponents.CharacterType] = [], keyboardType: UIKit.UIKeyboardType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .sentences, identifier: Swift.String? = nil, textViewIdentifier: Swift.String? = nil, helperIdentifier: Swift.String? = nil)
}
@_spi(OitiOnly) public enum TextFieldComponentSize {
  @_spi(OitiOnly) case normal
  @_spi(OitiOnly) case large
  @_spi(OitiOnly) public static func == (a: OitiComponents.TextFieldComponentSize, b: OitiComponents.TextFieldComponentSize) -> Swift.Bool
  @_spi(OitiOnly) public func hash(into hasher: inout Swift.Hasher)
  @_spi(OitiOnly) public var hashValue: Swift.Int {
    @_spi(OitiOnly) get
  }
}
@_spi(OitiOnly) extension UIKit.UIImage {
  @_spi(OitiOnly) public func cropToRect(rect: CoreFoundation.CGRect) -> UIKit.UIImage
}
@_spi(OitiOnly) extension UIKit.UIImage {
  @_spi(OitiOnly) public func resizeImage(targetSize: CoreFoundation.CGSize) -> UIKit.UIImage?
  @_spi(OitiOnly) public func toBase64(withSizeInMb expectedSizeInMb: Swift.Float) -> Swift.String?
}
@_spi(OitiOnly) extension UIKit.UIImage {
  @_spi(OitiOnly) public static func rotatedImage(from cgImage: CoreGraphics.CGImage, rotatedBy degrees: Swift.Double) -> UIKit.UIImage?
}
@_spi(OitiOnly) extension UIKit.UIImage {
  @_spi(OitiOnly) public static func fromGif(resourceName: Swift.String, bundle externalBundle: Foundation.Bundle? = nil, durationPerFrame duration: CoreFoundation.CGFloat) -> UIKit.UIImage?
}
@_spi(OitiOnly) extension UIKit.UIView {
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func makeConstraints() -> OitiComponents.ConstraintBuilder
}
@_spi(OitiOnly) extension UIKit.UIView {
  @_spi(OitiOnly) @_Concurrency.MainActor(unsafe) public func createImageFromView() -> UIKit.UIImage
}
extension OitiComponents.ViewBuilder {
  public struct ImageView {
    public static func create(for imageName: Swift.String, bundle: Foundation.Bundle = .main) -> OitiComponents.ViewBuilder.ImageView
    public static func create(with image: UIKit.UIImage? = nil) -> OitiComponents.ViewBuilder.ImageView
    public func build() -> UIKit.UIImageView
    public func tintColor(_ color: UIKit.UIColor) -> OitiComponents.ViewBuilder.ImageView
    public func contentMode(_ mode: UIKit.UIView.ContentMode) -> OitiComponents.ViewBuilder.ImageView
    public func backgroundColor(_ color: UIKit.UIColor) -> OitiComponents.ViewBuilder.ImageView
    public func cornerRadius(_ radius: CoreFoundation.CGFloat) -> OitiComponents.ViewBuilder.ImageView
    @available(iOS 11.0, *)
    public func cornerRadius(_ radius: CoreFoundation.CGFloat, edges: QuartzCore.CACornerMask) -> OitiComponents.ViewBuilder.ImageView
    public func masksToBounds(_ value: Swift.Bool = true) -> OitiComponents.ViewBuilder.ImageView
  }
}
@_spi(OitiOnly) extension OitiComponents.ViewBuilder {
  @_spi(OitiOnly) public struct Label {
    @_spi(OitiOnly) public static func create(for text: Swift.String) -> OitiComponents.ViewBuilder.Label
    @_spi(OitiOnly) public static func create() -> OitiComponents.ViewBuilder.Label
    @_spi(OitiOnly) public static func create(withAttributedString attrString: Foundation.NSAttributedString) -> OitiComponents.ViewBuilder.Label
    @_spi(OitiOnly) public func build() -> UIKit.UILabel
    @_spi(OitiOnly) public func numberOfLines(_ number: Swift.Int) -> OitiComponents.ViewBuilder.Label
    @_spi(OitiOnly) public func textAligment(_ aligment: UIKit.NSTextAlignment) -> OitiComponents.ViewBuilder.Label
    @_spi(OitiOnly) public func font(_ font: UIKit.UIFont) -> OitiComponents.ViewBuilder.Label
    @_spi(OitiOnly) public func textColor(_ color: UIKit.UIColor) -> OitiComponents.ViewBuilder.Label
    @_spi(OitiOnly) public func identifier(_ identifier: Swift.String) -> OitiComponents.ViewBuilder.Label
  }
}
@_spi(OitiOnly) extension OitiComponents.ViewBuilder {
  @_spi(OitiOnly) public struct TextField {
    @_spi(OitiOnly) public static func create() -> OitiComponents.ViewBuilder.TextField
    @_spi(OitiOnly) public func build() -> UIKit.UITextField
    @_spi(OitiOnly) public func font(_ font: UIKit.UIFont) -> OitiComponents.ViewBuilder.TextField
    @_spi(OitiOnly) public func textColor(_ color: UIKit.UIColor) -> OitiComponents.ViewBuilder.TextField
    @_spi(OitiOnly) public func tintColor(_ color: UIKit.UIColor) -> OitiComponents.ViewBuilder.TextField
    @_spi(OitiOnly) public func textAlignment(_ alignment: UIKit.NSTextAlignment) -> OitiComponents.ViewBuilder.TextField
    @_spi(OitiOnly) public func clearButtonMode(_ mode: UIKit.UITextField.ViewMode) -> OitiComponents.ViewBuilder.TextField
    @_spi(OitiOnly) public func showSecureTextEntry(_ value: Swift.Bool) -> OitiComponents.ViewBuilder.TextField
  }
}
@_spi(OitiOnly) extension OitiComponents.ViewBuilder {
  @_spi(OitiOnly) public struct View {
    @_spi(OitiOnly) public static func create(with frame: CoreFoundation.CGRect) -> OitiComponents.ViewBuilder.View
    @_spi(OitiOnly) public static func create(with size: CoreFoundation.CGSize) -> OitiComponents.ViewBuilder.View
    @_spi(OitiOnly) public static func create() -> OitiComponents.ViewBuilder.View
    @_spi(OitiOnly) public func build() -> UIKit.UIView
    @_spi(OitiOnly) public func backgroundColor(_ color: UIKit.UIColor) -> OitiComponents.ViewBuilder.View
    @_spi(OitiOnly) public func backgroundColor(_ color: UIKit.UIColor, opacity: CoreFoundation.CGFloat = 1.0) -> OitiComponents.ViewBuilder.View
    @_spi(OitiOnly) public func borderColor(_ color: UIKit.UIColor) -> OitiComponents.ViewBuilder.View
    @_spi(OitiOnly) public func borderWidth(_ width: CoreFoundation.CGFloat) -> OitiComponents.ViewBuilder.View
    @_spi(OitiOnly) public func cornerRadius(_ radius: CoreFoundation.CGFloat) -> OitiComponents.ViewBuilder.View
    @_spi(OitiOnly) @available(iOS 11.0, *)
    public func cornerRadius(_ radius: CoreFoundation.CGFloat, edges: QuartzCore.CACornerMask) -> OitiComponents.ViewBuilder.View
    @_spi(OitiOnly) public func masksToBounds(_ value: Swift.Bool = true) -> OitiComponents.ViewBuilder.View
    @_spi(OitiOnly) public func customContent(contentBuilder: @escaping (UIKit.UIView) -> Swift.Void) -> OitiComponents.ViewBuilder.View
  }
}
public enum ViewBuilder {
}
public enum Visibility : Swift.Int, Swift.CaseIterable {
  case displayed
  case hidden
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [OitiComponents.Visibility]
  public typealias RawValue = Swift.Int
  public static var allCases: [OitiComponents.Visibility] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension OitiComponents.ButtonComponentType : Swift.Equatable {}
extension OitiComponents.ButtonComponentType : Swift.Hashable {}
@_spi(OitiOnly) extension OitiComponents.CharacterType : Swift.Equatable {}
@_spi(OitiOnly) extension OitiComponents.CharacterType : Swift.Hashable {}
@_spi(OitiOnly) extension OitiComponents.ComponentSize : Swift.Equatable {}
@_spi(OitiOnly) extension OitiComponents.ComponentSize : Swift.Hashable {}
@_spi(OitiOnly) extension OitiComponents.DesignTokens.Font.Size : Swift.Equatable {}
@_spi(OitiOnly) extension OitiComponents.DesignTokens.Font.Size : Swift.Hashable {}
@_spi(OitiOnly) extension OitiComponents.LinkComponentStyles : Swift.Equatable {}
@_spi(OitiOnly) extension OitiComponents.LinkComponentStyles : Swift.Hashable {}
@_spi(OitiOnly) extension OitiComponents.LoadingTypes : Swift.Equatable {}
@_spi(OitiOnly) extension OitiComponents.LoadingTypes : Swift.Hashable {}
@_spi(OitiOnly) extension OitiComponents.TextFieldComponentSize : Swift.Equatable {}
@_spi(OitiOnly) extension OitiComponents.TextFieldComponentSize : Swift.Hashable {}
extension OitiComponents.Visibility : Swift.Equatable {}
extension OitiComponents.Visibility : Swift.Hashable {}
extension OitiComponents.Visibility : Swift.RawRepresentable {}
