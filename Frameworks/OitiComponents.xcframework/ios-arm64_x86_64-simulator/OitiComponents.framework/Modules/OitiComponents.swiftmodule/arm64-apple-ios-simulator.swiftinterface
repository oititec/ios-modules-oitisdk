// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name OitiComponents
import AVFoundation
import CoreGraphics
import CoreText
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit.UIButton
import UIKit.UIColor
import UIKit.UIImage
import UIKit
import UIKit.UIView
import UIKit.UIViewController
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol ButtonLayoutContraintsModel {
  var heightValue: CoreFoundation.CGFloat { get }
  func layout(_ view: UIKit.UIView, superview: UIKit.UIView, spacing: CoreFoundation.CGFloat)
  func layoutSquare(_ view: UIKit.UIView)
  func layoutFont(titleLabel: UIKit.UILabel)
  func layoutIcon(iconImage: UIKit.UIImageView, uiView: UIKit.UIView)
}
public enum ButtonComponentType {
  case simple
  case complex
  public static func == (a: OitiComponents.ButtonComponentType, b: OitiComponents.ButtonComponentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol CustomCameraPermissionView : UIKit.UIView {
  var backButton: UIKit.UIButton! { get }
  var checkPermissionButton: UIKit.UIButton! { get }
  var openSettingsButton: UIKit.UIButton! { get }
  var closeButton: UIKit.UIButton! { get }
  func showBottomSheet(visibility: OitiComponents.Visibility)
}
public struct HybridViewAppearance {
  public init(configuration: any OitiComponents.LoadingViewConfigurationProtocol)
}
public protocol LoadingViewConfigurationProtocol {
  var backgroundColor: UIKit.UIColor { get }
  func createLoadingView() -> UIKit.UIView
}
extension OitiComponents.ViewBuilder {
  public struct ImageView {
    public static func create(for imageName: Swift.String, bundle: Foundation.Bundle = .main) -> OitiComponents.ViewBuilder.ImageView
    public static func create(with image: UIKit.UIImage? = nil) -> OitiComponents.ViewBuilder.ImageView
    public func build() -> UIKit.UIImageView
    public func tintColor(_ color: UIKit.UIColor) -> OitiComponents.ViewBuilder.ImageView
    public func contentMode(_ mode: UIKit.UIView.ContentMode) -> OitiComponents.ViewBuilder.ImageView
    public func backgroundColor(_ color: UIKit.UIColor) -> OitiComponents.ViewBuilder.ImageView
    public func cornerRadius(_ radius: CoreFoundation.CGFloat) -> OitiComponents.ViewBuilder.ImageView
    @available(iOS 11.0, *)
    public func cornerRadius(_ radius: CoreFoundation.CGFloat, edges: QuartzCore.CACornerMask) -> OitiComponents.ViewBuilder.ImageView
    public func masksToBounds(_ value: Swift.Bool = true) -> OitiComponents.ViewBuilder.ImageView
  }
}
public enum ViewBuilder {
}
public enum Visibility : Swift.Int, Swift.CaseIterable {
  case displayed
  case hidden
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [OitiComponents.Visibility]
  public typealias RawValue = Swift.Int
  public static var allCases: [OitiComponents.Visibility] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension OitiComponents.ButtonComponentType : Swift.Equatable {}
extension OitiComponents.ButtonComponentType : Swift.Hashable {}
extension OitiComponents.Visibility : Swift.Equatable {}
extension OitiComponents.Visibility : Swift.Hashable {}
extension OitiComponents.Visibility : Swift.RawRepresentable {}
