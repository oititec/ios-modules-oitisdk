// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name OILivenessIProov
import DeveloperToolsSupport
import Foundation
import OICommons
import OIComponents
@_exported import OILivenessIProov
import OINetwork
import OISecurity
import Swift
import SwiftUI
import UIKit.UIImage
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import iProov
public enum IProovResultLayoutType {
  case success
  case error
  public static func == (a: OILivenessIProov.IProovResultLayoutType, b: OILivenessIProov.IProovResultLayoutType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol IProovCustomResultView : UIKit.UIView {
  func display(for resultType: OILivenessIProov.IProovResultLayoutType)
}
public enum IProovError : Swift.Int, Swift.Error {
  case invalidAppKey
  case noCameraPermission
  case noInternetConnection
  case livenessNotCompleted
  case livenessNotInitialized
  case transactionNotCompleted
  case invalidCustomization
  case genericException
  public var code: Swift.Int {
    get
  }
  public var message: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct IProovStarterData {
}
extension OILivenessIProov.IProovStarterData {
  public static func builder(withAppKey appKey: Swift.String, environment: OICommons.Environment, url sessionUrl: Swift.String, token sessionToken: Swift.String) -> OILivenessIProov.IProovStarterData.Builder
  @_hasMissingDesignatedInitializers final public class Builder {
    final public func setTicket(_ ticket: Swift.String) -> Self
    final public func setCallback(_ callback: (any OILivenessIProov.IProovCallback)?) -> Self
    final public func setLivenessCustomization(_ customization: OILivenessIProov.IProovLivenessCustomizationBuilder) -> Self
    final public func setLoadingCustomization(_ customization: OILivenessIProov.IProovLoadingCustomizationBuilder) -> Self
    final public func setResultCustomization(_ customization: OILivenessIProov.IProovResultCustomizationBuilder) -> Self
    final public func setLoadingView(_ customView: OILivenessIProov.IProovCustomLoadingView?) -> Self
    final public func setResultView(_ customView: (any OILivenessIProov.IProovCustomResultView)?) -> Self
    final public func build() -> OILivenessIProov.IProovStarterData
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers final public class IProovStarter {
  public static func start(at rootViewController: UIKit.UINavigationController, with starterData: OILivenessIProov.IProovStarterData)
  @objc deinit
}
extension OILivenessIProov.IProovStarter {
  @objc final public func present(iProovViewController: UIKit.UIViewController, completion: (() -> Swift.Void)?)
  @objc final public func dismiss(iProovViewController: UIKit.UIViewController, completion: (() -> Swift.Void)?)
}
@_hasMissingDesignatedInitializers final public class IProovLivenessCustomizationBuilder {
  @discardableResult
  final public func setFilter(withStyle style: OILivenessIProov.FilterStyle, color: UIKit.UIColor? = nil, backgroundColor: UIKit.UIColor? = nil) -> Self
  @discardableResult
  final public func setHeader(withText text: Swift.String, textColor: UIKit.UIColor? = nil, backgroundColor: UIKit.UIColor? = nil) -> Self
  @discardableResult
  final public func setFont(withName fontName: Swift.String) -> Self
  @discardableResult
  final public func setPromptColors(forText textColor: UIKit.UIColor?, backgroundColor: UIKit.UIColor? = nil) -> Self
  @discardableResult
  final public func setPromptRoundedCorners(enabled: Swift.Bool = false) -> Self
  @discardableResult
  final public func setCloseButtonImage(_ image: UIKit.UIImage?, tintColor: UIKit.UIColor? = nil) -> Self
  @discardableResult
  final public func setLogoImage(_ image: UIKit.UIImage) -> Self
  @discardableResult
  final public func setBackgroundColor(_ color: UIKit.UIColor) -> Self
  @discardableResult
  final public func setLAOvalStrokeColors(forCapturing capturingColor: UIKit.UIColor?, completed completedColor: UIKit.UIColor? = nil) -> Self
  @discardableResult
  final public func setGPAOvalStrokeColors(forNotReady notReadyColor: UIKit.UIColor?, completed completedColor: UIKit.UIColor? = nil) -> Self
  @objc deinit
}
public struct IProovResult {
  public var valid: Swift.Bool
  public var codId: Swift.Double
  public var cause: Swift.String?
  public var `protocol`: Swift.String
  public var scanResultBlob: Swift.String?
}
public typealias IProovCustomLoadingView = UIKit.UIView
public struct IProovResultCustomization {
  public static func builder() -> OILivenessIProov.IProovResultCustomizationBuilder
}
@_hasMissingDesignatedInitializers final public class IProovResultCustomizationBuilder {
  @discardableResult
  final public func setResultBackgroundColor(_ color: UIKit.UIColor, forResultType resultType: OILivenessIProov.IProovResultLayoutType) -> Self
  @discardableResult
  final public func setResultImage(_ image: UIKit.UIImage?, forResultType resultType: OILivenessIProov.IProovResultLayoutType) -> Self
  @discardableResult
  final public func setResultMessageFont(_ font: UIKit.UIFont) -> Self
  @discardableResult
  final public func setResultMessage(_ message: Swift.String, forResultType resultType: OILivenessIProov.IProovResultLayoutType) -> Self
  @discardableResult
  final public func setResultMessageColor(_ color: UIKit.UIColor, forResultType resultType: OILivenessIProov.IProovResultLayoutType) -> Self
  @objc deinit
}
public struct IProovLoadingCustomization {
  public static func builder() -> OILivenessIProov.IProovLoadingCustomizationBuilder
}
@_hasMissingDesignatedInitializers final public class IProovLoadingCustomizationBuilder {
  @discardableResult
  final public func setLoadingBackgroundColor(_ color: UIKit.UIColor) -> Self
  @discardableResult
  final public func setLoadingSpinner(withColor color: UIKit.UIColor?, width spinnerWidth: CoreFoundation.CGFloat? = nil, scaleFactor spinnerScaleFactor: Swift.Int? = nil) -> Self
  @objc deinit
}
public enum FilterStyle {
  case classic
  case shaded
  case vibrant
  public static func == (a: OILivenessIProov.FilterStyle, b: OILivenessIProov.FilterStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct IProovLivenessCustomization {
  public static func builder() -> OILivenessIProov.IProovLivenessCustomizationBuilder
}
public protocol IProovCallback : AnyObject {
  func onSuccess(_ result: OILivenessIProov.IProovResult)
  func onError(_ error: OILivenessIProov.IProovError)
}
extension OILivenessIProov.IProovResultLayoutType : Swift.Equatable {}
extension OILivenessIProov.IProovResultLayoutType : Swift.Hashable {}
extension OILivenessIProov.IProovError : Swift.Equatable {}
extension OILivenessIProov.IProovError : Swift.Hashable {}
extension OILivenessIProov.IProovError : Swift.RawRepresentable {}
extension OILivenessIProov.IProovStarter : iProov.IProovPresentationDelegate {}
extension OILivenessIProov.FilterStyle : Swift.Equatable {}
extension OILivenessIProov.FilterStyle : Swift.Hashable {}
