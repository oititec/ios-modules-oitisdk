// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name OitiLivenessFacetec
import AVFoundation
import DeveloperToolsSupport
import Foundation
@_spi(OitiOnly) import OitiComponents
import OitiNetwork
import OitiSecurity
import OitiUtils
import Swift
import SwiftUI
import UIKit.UIButton
import UIKit.UIImage
import UIKit
import UIKit.UIView
import UIKit.UIViewController
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public typealias Environment = OitiNetwork.Environment
public typealias Visibility = OitiComponents.Visibility
public typealias Liveness3DSuccess = OitiNetwork.Liveness3DSuccess
public protocol CustomCameraPermissionView : OitiComponents.CustomCameraPermissionView {
  override func showBottomSheet(visibility: OitiLivenessFacetec.Visibility)
}
public struct BlobAnimationAppearance {
  public init(blobColor: UIKit.UIColor, checkmarkForegroundColor: UIKit.UIColor, checkmarkBackgroundColor: UIKit.UIColor)
}
public protocol CustomResultAnimationDelegate {
  func createActivityIndicatorView() -> UIKit.UIView?
  func createSuccessAnimationView() -> UIKit.UIView?
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class HybridLiveness3DViewController : OitiLivenessFacetec.Liveness3DViewController {
  @_Concurrency.MainActor(unsafe) public init(liveness3DUser: OitiLivenessFacetec.Liveness3DUser, delegate: any OitiLivenessFacetec.Liveness3DDelegate, customAppearance: OitiComponents.HybridViewAppearance?)
  @objc deinit
}
public struct ImageAnimationAppearance {
  public init(image: UIKit.UIImage?, rotationInterval: Swift.Int32, checkmarkForegroundColor: UIKit.UIColor, checkmarkBackgroundColor: UIKit.UIColor)
}
public protocol Liveness3DCustomInstructionView : UIKit.UIView {
  var backButton: UIKit.UIButton! { get }
  var continueButton: UIKit.UIButton! { get }
  func changeLoadingVisibility(to visibility: OitiLivenessFacetec.Visibility)
}
public protocol Liveness3DDelegate : AnyObject {
  func handleLiveness3DValidation(validateModel: OitiLivenessFacetec.Liveness3DSuccess)
  func handleLiveness3DError(error: OitiLivenessFacetec.Liveness3DError)
}
public struct Liveness3DError {
  public let code: Swift.Int
  public let type: OitiLivenessFacetec.Liveness3DErrorCode
  public let message: Swift.String
}
public enum Liveness3DErrorCode : Swift.Int, Swift.Error {
  case invalidAppKey
  case noCameraPermission
  case noInternetConnection
  case livenessNotCompleted
  case livenessNotInitialized
  case transactionNotCompleted
  case genericException
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Liveness3DLoadingCustomization {
  public var backgroundColor: UIKit.UIColor
  public var spinnerColor: UIKit.UIColor
  public var spinnerWidth: CoreFoundation.CGFloat
  public var spinnerScaleFactor: Swift.Int
  public init()
}
public struct Liveness3DShadow {
  public init(color: UIKit.UIColor, opacity: Swift.Float, radius: Swift.Float, offset: CoreFoundation.CGSize, insets: UIKit.UIEdgeInsets)
}
public enum Liveness3DStarter {
  public static func start(at rootViewController: UIKit.UIViewController, with starterData: OitiLivenessFacetec.Liveness3DStarterData)
}
public struct Liveness3DStarterData {
}
extension OitiLivenessFacetec.Liveness3DStarterData {
  public static func builder(withAppKey appKey: Swift.String, token sessionToken: Swift.String, environment: OitiLivenessFacetec.Environment, delegate: any OitiLivenessFacetec.Liveness3DDelegate) -> OitiLivenessFacetec.Liveness3DStarterData.Builder
  @_hasMissingDesignatedInitializers final public class Builder {
    final public func setTicket(_ ticket: Swift.String) -> Self
    final public func setTotp(_ totp: Swift.String?) -> Self
    final public func setLoadingCustomization(_ customization: OitiLivenessFacetec.Liveness3DLoadingCustomization) -> Self
    final public func setDefaultTheme(_ theme: OitiLivenessFacetec.Liveness3DTheme?) -> Self
    final public func setLowLightTheme(_ theme: OitiLivenessFacetec.Liveness3DTheme?) -> Self
    final public func setTexts(_ texts: [OitiLivenessFacetec.Liveness3DTextKey : Swift.String]?) -> Self
    final public func setText(_ text: Swift.String, forKey key: OitiLivenessFacetec.Liveness3DTextKey) -> Self
    final public func setTracker(_ tracker: OitiSecurity.SecurityManager?) -> Self
    final public func build() -> OitiLivenessFacetec.Liveness3DStarterData
    @objc deinit
  }
}
public enum Liveness3DTextKey {
  case readyHeader1
  case readyHeader2
  case readyMessage1
  case readyMessage2
  case readyButton
  case retryHeader
  case retrySubheader
  case retryYourPicture
  case retryIdealPicture
  case retryMessageSmile
  case retryMessageLightning
  case retryMessageContrast
  case retryButton
  case resultUploadMessage
  case resultSuccessMessage
  case feedbackCenterFace
  case feedbackFaceNotFound
  case feedbackFaceNotLookingStraightAhead
  case feedbackFaceNotUpright
  case feedbackHoldSteady
  case feedbackMovePhoneAway
  case feedbackMovePhoneCloser
  case feedbackMovePhoneToEyeLevel
  case feedbackUseEvenLighting
  case feedbackFrameYourFace
  case feedbackPositionFaceStraightInOval
  case feedbackHoldSteady1
  case feedbackHoldSteady2
  case feedbackHoldSteady3
  case feedbackRemoveDarkGlasses
  case feedbackNeutralExpression
  case feedbackConditionsTooBright
  case feedbackBrightenYourEnvironment
  public static func == (a: OitiLivenessFacetec.Liveness3DTextKey, b: OitiLivenessFacetec.Liveness3DTextKey) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Liveness3DTheme {
  public enum CancelButtonLocation : Swift.Int {
    case topLeft, topRight, disabled
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ThemeType : Swift.Int {
    case light, dark
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public init(_ theme: OitiLivenessFacetec.Liveness3DTheme.ThemeType)
  public var readyScreenCustomizationHeaderFont: UIKit.UIFont?
  public var readyScreenCustomizationHeaderTextColor: UIKit.UIColor
  public var readyScreenCustomizationSubtextFont: UIKit.UIFont?
  public var readyScreenCustomizationSubtextTextColor: UIKit.UIColor
  public var readyScreenCustomizationTextBackgroundColor: UIKit.UIColor?
  public var readyScreenCustomizationTextBackgroundCornerRadius: Swift.Int32
  public var resultScreenCustomizationMessageFont: UIKit.UIFont?
  public var resultScreenCustomizationTextColor: UIKit.UIColor
  public var resultScreenCustomizationShowUploadProgressBar: Swift.Bool
  public var resultScreenCustomizationUploadProgressFillColor: UIKit.UIColor
  public var resultScreenCustomizationUploadProgressTrackColor: UIKit.UIColor
  public var resultScreenCustomizationAnimationRelativeScale: Swift.Float
  public var resultScreenCustomizationAnimationStyle: OitiLivenessFacetec.ResultAnimationStyle
  public var retryScreenCustomizationHeaderFont: UIKit.UIFont?
  public var retryScreenCustomizationHeaderTextColor: UIKit.UIColor
  public var retryScreenCustomizationSubtextFont: UIKit.UIFont?
  public var retryScreenCustomizationSubtextTextColor: UIKit.UIColor
  public var retryScreenCustomizationImageBorderColor: UIKit.UIColor
  public var retryScreenCustomizationImageBorderWidth: Swift.Int32
  public var retryScreenCustomizationImageCornerRadius: Swift.Int32
  public var guidanceCustomizationHeaderFont: UIKit.UIFont?
  public var guidanceCustomizationSubtextFont: UIKit.UIFont?
  public var guidanceCustomizationButtonBackgroundNormalColor: UIKit.UIColor
  public var guidanceCustomizationButtonBackgroundHighlightColor: UIKit.UIColor
  public var guidanceCustomizationButtonBackgroundDisabledColor: UIKit.UIColor
  public var guidanceCustomizationButtonTextNormalColor: UIKit.UIColor
  public var guidanceCustomizationButtonTextHighlightColor: UIKit.UIColor
  public var guidanceCustomizationButtonTextDisabledColor: UIKit.UIColor
  public var guidanceCustomizationButtonFont: UIKit.UIFont?
  public var guidanceCustomizationButtonBorderColor: UIKit.UIColor
  public var guidanceCustomizationButtonBorderWidth: Swift.Int32
  public var guidanceCustomizationButtonCornerRadius: Swift.Int32
  public var frameCustomizationBorderWidth: Swift.Int32
  public var frameCustomizationBorderColor: UIKit.UIColor
  public var frameCustomizationBackgroundColor: UIKit.UIColor
  public var frameCustomizationCornerRadius: Swift.Int32
  public var frameCustomizationShadow: OitiLivenessFacetec.Liveness3DShadow?
  public var ovalCustomizationStrokeColor: UIKit.UIColor
  public var ovalCustomizationStrokeWidth: Swift.Int32
  public var ovalCustomizationProgressColor1: UIKit.UIColor
  public var ovalCustomizationProgressColor2: UIKit.UIColor
  public var ovalCustomizationProgressStrokeWidth: Swift.Int32
  public var ovalCustomizationProgressRadialOffset: Swift.Int32
  public var overlayCustomizationBackgroundColor: UIKit.UIColor
  public var overlayCustomizationBrandingImage: UIKit.UIImage?
  public var overlayCustomizationShowBrandingImage: Swift.Bool
  public var feedbackCustomizationCornerRadius: Swift.Int32
  public var feedbackCustomizationBackgroundColor: UIKit.UIColor
  public var feedbackCustomizationTextColor: UIKit.UIColor
  public var feedbackCustomizationTextFont: UIKit.UIFont?
  public var feedbackCustomizationShadow: OitiLivenessFacetec.Liveness3DShadow?
  public var cancelButtonCustomizationCustomImage: UIKit.UIImage?
  public var cancelButtonCustomizationLocation: OitiLivenessFacetec.Liveness3DTheme.CancelButtonLocation
  public var vocalGuidanceMode: OitiLivenessFacetec.VocalGuidanceMode
  public static func builder() -> OitiLivenessFacetec.Liveness3DThemeBuilder
}
@_hasMissingDesignatedInitializers final public class Liveness3DThemeBuilder {
  final public func build() -> OitiLivenessFacetec.Liveness3DTheme
  @discardableResult
  final public func setReadyScreenHeader(color: UIKit.UIColor? = nil, font: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setReadyScreenMessage(color: UIKit.UIColor? = nil, font: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setReadyScreenTextBackground(color: UIKit.UIColor? = nil, cornerRadius radius: Swift.Int? = nil) -> Self
  @discardableResult
  final public func setResultScreenMessage(color: UIKit.UIColor? = nil, font: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setResultScreenUploadProgressBar(display: Swift.Bool, fillColor: UIKit.UIColor? = nil, trackColor: UIKit.UIColor? = nil) -> Self
  @discardableResult
  final public func setResultScreenAnimationStyle(_ style: OitiLivenessFacetec.ResultAnimationStyle, scale: Swift.Float = 1.0) -> Self
  @discardableResult
  final public func setRetryScreenHeader(color: UIKit.UIColor? = nil, font: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setRetryScreenCaption(color: UIKit.UIColor? = nil, font: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setRetryScreenImageBorder(color: UIKit.UIColor? = nil, width: Swift.Int? = nil, cornerRadius radius: Swift.Int? = nil) -> Self
  @discardableResult
  final public func setGuidanceFonts(header headerFont: UIKit.UIFont? = nil, subtext subtextFont: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setGuidanceButtonBackgroundColors(normal normalColor: UIKit.UIColor? = nil, highlight highlightColor: UIKit.UIColor? = nil, disabled disabledColor: UIKit.UIColor? = nil) -> Self
  @discardableResult
  final public func setGuidanceButtonTextColors(normal normalColor: UIKit.UIColor? = nil, highlight highlightColor: UIKit.UIColor? = nil, disabled disabledColor: UIKit.UIColor? = nil) -> Self
  @discardableResult
  final public func setGuidanceButtonFont(_ font: UIKit.UIFont?) -> Self
  @discardableResult
  final public func setGuidanceButtonBorder(color: UIKit.UIColor? = nil, width: Swift.Int? = nil, cornerRadius radius: Swift.Int? = nil) -> Self
  @discardableResult
  final public func setFrameBorder(color: UIKit.UIColor? = nil, width: Swift.Int? = nil, cornerRadius radius: Swift.Int? = nil) -> Self
  @discardableResult
  final public func setFrameBackgroundColor(_ color: UIKit.UIColor) -> Self
  @discardableResult
  final public func setFrameShadow(_ shadow: OitiLivenessFacetec.Liveness3DShadow) -> Self
  @discardableResult
  final public func setOvalStroke(_ color: UIKit.UIColor? = nil, width: Swift.Int? = nil) -> Self
  @discardableResult
  final public func setOvalProgress(color1: UIKit.UIColor? = nil, color2: UIKit.UIColor? = nil, width: Swift.Int? = nil, offset: Swift.Int? = nil) -> Self
  @discardableResult
  final public func setOverlayBackgroundColor(_ color: UIKit.UIColor) -> Self
  @discardableResult
  final public func setOverlayBrandImage(_ image: UIKit.UIImage) -> Self
  @discardableResult
  final public func setFeedbackMessage(color: UIKit.UIColor? = nil, font: UIKit.UIFont? = nil) -> Self
  @discardableResult
  final public func setFeedbackBar(backgroundColor: UIKit.UIColor? = nil, cornerRadius radius: Swift.Int? = nil, shadow: OitiLivenessFacetec.Liveness3DShadow? = nil) -> Self
  @discardableResult
  final public func setCancelButton(icon: UIKit.UIImage? = nil, location: OitiLivenessFacetec.Liveness3DTheme.CancelButtonLocation = .topLeft) -> Self
  @discardableResult
  final public func setVocalGuidanceMode(_ mode: OitiLivenessFacetec.VocalGuidanceMode) -> Self
  @objc deinit
}
public struct Liveness3DUser {
  public init(appKey: Swift.String, ticket: Swift.String? = nil, environment: OitiLivenessFacetec.Environment, defaultTheme: OitiLivenessFacetec.Liveness3DTheme? = nil, lowLightTheme: OitiLivenessFacetec.Liveness3DTheme? = nil, texts: [OitiLivenessFacetec.Liveness3DTextKey : Swift.String]? = nil)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class Liveness3DViewController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) weak public var liveness3DDelegate: (any OitiLivenessFacetec.Liveness3DDelegate)?
  @_Concurrency.MainActor(unsafe) convenience public init(liveness3DUser: OitiLivenessFacetec.Liveness3DUser, delegate: any OitiLivenessFacetec.Liveness3DDelegate, customInstructionView: (any OitiLivenessFacetec.Liveness3DCustomInstructionView)? = nil, customPermissionView: (any OitiLivenessFacetec.CustomCameraPermissionView)? = nil)
  @objc deinit
}
extension OitiLivenessFacetec.Liveness3DViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
public enum VocalGuidanceMode : Swift.Int {
  case noVocalGuidance
  case minimalVocalGuidance
  case fullVocalGuidance
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ResultAnimationStyle {
  case blob(appearance: OitiLivenessFacetec.BlobAnimationAppearance)
  case spinner(appearance: OitiLivenessFacetec.SpinnerAnimationAppearance)
  case image(appearance: OitiLivenessFacetec.ImageAnimationAppearance)
  case custom(delegate: any OitiLivenessFacetec.CustomResultAnimationDelegate)
}
public struct SpinnerAnimationAppearance {
  public init(spinnerColor: UIKit.UIColor, checkmarkForegroundColor: UIKit.UIColor, checkmarkBackgroundColor: UIKit.UIColor)
}
extension OitiLivenessFacetec.Liveness3DErrorCode : Swift.Equatable {}
extension OitiLivenessFacetec.Liveness3DErrorCode : Swift.Hashable {}
extension OitiLivenessFacetec.Liveness3DErrorCode : Swift.RawRepresentable {}
extension OitiLivenessFacetec.Liveness3DTextKey : Swift.Equatable {}
extension OitiLivenessFacetec.Liveness3DTextKey : Swift.Hashable {}
extension OitiLivenessFacetec.Liveness3DTheme.CancelButtonLocation : Swift.Equatable {}
extension OitiLivenessFacetec.Liveness3DTheme.CancelButtonLocation : Swift.Hashable {}
extension OitiLivenessFacetec.Liveness3DTheme.CancelButtonLocation : Swift.RawRepresentable {}
extension OitiLivenessFacetec.Liveness3DTheme.ThemeType : Swift.Equatable {}
extension OitiLivenessFacetec.Liveness3DTheme.ThemeType : Swift.Hashable {}
extension OitiLivenessFacetec.Liveness3DTheme.ThemeType : Swift.RawRepresentable {}
extension OitiLivenessFacetec.VocalGuidanceMode : Swift.Equatable {}
extension OitiLivenessFacetec.VocalGuidanceMode : Swift.Hashable {}
extension OitiLivenessFacetec.VocalGuidanceMode : Swift.RawRepresentable {}
