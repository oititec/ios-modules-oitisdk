// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name OitiNetwork
import CommonCrypto
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum Environment : Swift.String, Swift.CaseIterable {
  case HML
  case PRD
  public init?(rawValue: Swift.String)
  public typealias AllCases = [OitiNetwork.Environment]
  public typealias RawValue = Swift.String
  public static var allCases: [OitiNetwork.Environment] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum EnvironmentManager {
  public static func facecaptchaBaseUrl(from environment: OitiNetwork.Environment) -> Swift.String
  public static func certifaceBaseUrl(from environment: OitiNetwork.Environment) -> Swift.String
}
public struct ErrorDetail {
  public let error: any Swift.Error
  public let fileName: Swift.String
  public let line: Swift.String
  public let stackTrace: Swift.String
  public init(error: any Swift.Error, fileName: Swift.String, line: Swift.Int, stackTrace: [Swift.String])
}
public struct FCBaseModel {
  public var appkey: Swift.String?
  public var fcvarUrlbase: Swift.String?
  public var p: Swift.String?
  public static let K_APP_KEY: Swift.String
  public static let K_P: Swift.String
  public init(appkey: Swift.String? = nil, fcvarUrlbase: Swift.String? = nil, p: Swift.String? = nil)
}
public struct FCCaptchaModel : Swift.Decodable {
  public var appkey: Swift.String?
  public var chkey: Swift.String?
  public var images: Swift.String?
  public var fcvarUrlbase: Swift.String?
  public init(appkey: Swift.String? = nil, chkey: Swift.String? = nil, images: Swift.String? = nil, fcvarUrlbase: Swift.String? = nil)
  public init(from decoder: any Swift.Decoder) throws
}
public struct FCChallengeModel : Swift.Decodable {
  public var mensagem: Swift.String?
  public var tempoEmSegundos: Swift.Int?
  public var tipoFace: OitiNetwork.FCTypeFaceModel?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class FCManager {
  public static let shared: any OitiNetwork.FCManagerProtocol
  @objc deinit
}
extension OitiNetwork.FCManager : OitiNetwork.FCManagerProtocol {
  public func verifyCertifaceOnline(consumerKey: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OitiNetwork.FCManagerSuccessCallback)
  public func verifyAppKey(consumerKey: Swift.String, appKey: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OitiNetwork.FCManagerSuccessCallback)
  public func fetchAllCaptchaCallenge(consumerKey: Swift.String, model: OitiNetwork.FCBaseModel, appkey: Swift.String, completion: @escaping OitiNetwork.FCManagerChallengeResultCallback)
  public func validateCaptchaChallenge(consumerKey: Swift.String, model: OitiNetwork.FCCaptchaModel, completion: @escaping OitiNetwork.FCManagerValidResultCallback)
  public func sendDocument(consumerKey: Swift.String, images: [Swift.String], appKey: Swift.String, baseUrl: Swift.String, completion: @escaping OitiNetwork.FCManagerSuccessCallback)
  public func sendDocument(consumerKey: Swift.String, images: [Swift.String], ticket: Swift.String, appKey: Swift.String, baseUrl: Swift.String, completion: @escaping OitiNetwork.FCManagerSuccessCallback)
  public func initializeSDKLiveness(consumerKey: Swift.String, appKey: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OitiNetwork.FCManagerInitializerResultCallback)
  public func create3DSession(consumerKey: Swift.String, appKey: Swift.String, userAgent: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OitiNetwork.FCManagerSession3DResultCallback)
  public func verifyLiveness3D(consumerKey: Swift.String, userAgent: Swift.String, appkey: Swift.String, faceScan: Swift.String, image auditTrailImage: Swift.String, lowQualityImage lowQualityAuditTrailImage: Swift.String, sessionId: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OitiNetwork.FCManager3DLivenessResultCallback)
  public func postSDKStatus(of payload: Foundation.Data, with baseUrl: Swift.String, consumerKey: Swift.String)
  public func postPayload(_ payload: Foundation.Data, endpoint: Swift.String, baseUrl: Swift.String, consumerKey: Swift.String, completion: @escaping OitiNetwork.FCManagerPayloadCallback)
  public func deviceIntelligenceToken(consumerKey: Swift.String, from baseUrl: Swift.String, withAppKey appKey: Swift.String, completion: @escaping (Swift.Result<Swift.String, any Swift.Error>, Swift.Int) -> Swift.Void)
  public func deviceIntelligenceEventData(consumerKey: Swift.String, from baseUrl: Swift.String, withToken deviceToken: Swift.String, save eventsData: Foundation.Data, completion: @escaping (Swift.Result<Swift.String, any Swift.Error>, Swift.Int) -> Swift.Void)
  public func deviceIntelligenceClose(consumerKey: Swift.String, from baseUrl: Swift.String, withToken deviceToken: Swift.String, completion: @escaping (Swift.Result<Swift.String, any Swift.Error>, Swift.Int) -> Swift.Void)
  public func credential(consumerKey: Swift.String, user: Swift.String, passcode: Swift.String, completion: @escaping OitiNetwork.FCManagerResultCallback)
  public func generateAppkey(consumerKey: Swift.String, user: Swift.String, token: Swift.String, cpf: Swift.String, name: Swift.String, birthdate: Swift.String, completion: @escaping OitiNetwork.FCManagerResultCallback)
  public func generateAppkey(consumerKey: Swift.String, user userProvided: Swift.String? = nil, passcode passcodeProvided: Swift.String? = nil, cpf: Swift.String, name: Swift.String, birthdate: Swift.String, completion: @escaping OitiNetwork.FCManagerAppKeyCallback)
}
public typealias FCManagerChallengeResultCallback = (_ value: OitiNetwork.FCResultModel?, _ errorDetail: OitiNetwork.ErrorDetail?) -> Swift.Void
public typealias FCManagerValidResultCallback = (_ value: OitiNetwork.FCValidCaptchaModel?, _ errorDetail: OitiNetwork.ErrorDetail?) -> Swift.Void
public typealias FCManagerSuccessCallback = (_ success: Swift.Bool, _ errorDetail: OitiNetwork.ErrorDetail?, _ httpCode: Swift.Int?) -> Swift.Void
public typealias FCManagerInitializerResultCallback = (_ value: OitiNetwork.FCInitializationModel?, _ errorDetail: OitiNetwork.ErrorDetail?) -> Swift.Void
public typealias FCManagerSession3DResultCallback = (_ value: OitiNetwork.FCSession3DModel?, _ errorDetail: OitiNetwork.ErrorDetail?) -> Swift.Void
public typealias FCManager3DLivenessResultCallback = (_ value: OitiNetwork.Liveness3DSuccess?, _ errorDetail: OitiNetwork.ErrorDetail?) -> Swift.Void
public typealias FCManagerPayloadCallback = (_ value: Swift.String?, _ errorDetail: OitiNetwork.ErrorDetail?) -> Swift.Void
public typealias FCManagerResultCallback = (_ value: Swift.String?, _ error: (any Swift.Error)?) -> Swift.Void
public typealias FCManagerAppKeyCallback = (_ appKey: Swift.String?) -> Swift.Void
public protocol FCManagerProtocol {
  func verifyCertifaceOnline(consumerKey: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OitiNetwork.FCManagerSuccessCallback)
  func verifyAppKey(consumerKey: Swift.String, appKey: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OitiNetwork.FCManagerSuccessCallback)
  func fetchAllCaptchaCallenge(consumerKey: Swift.String, model: OitiNetwork.FCBaseModel, appkey: Swift.String, completion: @escaping OitiNetwork.FCManagerChallengeResultCallback)
  func validateCaptchaChallenge(consumerKey: Swift.String, model: OitiNetwork.FCCaptchaModel, completion: @escaping OitiNetwork.FCManagerValidResultCallback)
  func sendDocument(consumerKey: Swift.String, images: [Swift.String], appKey: Swift.String, baseUrl: Swift.String, completion: @escaping OitiNetwork.FCManagerSuccessCallback)
  func sendDocument(consumerKey: Swift.String, images: [Swift.String], ticket: Swift.String, appKey: Swift.String, baseUrl: Swift.String, completion: @escaping OitiNetwork.FCManagerSuccessCallback)
  func initializeSDKLiveness(consumerKey: Swift.String, appKey: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OitiNetwork.FCManagerInitializerResultCallback)
  func create3DSession(consumerKey: Swift.String, appKey: Swift.String, userAgent: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OitiNetwork.FCManagerSession3DResultCallback)
  func verifyLiveness3D(consumerKey: Swift.String, userAgent: Swift.String, appkey: Swift.String, faceScan: Swift.String, image auditTrailImage: Swift.String, lowQualityImage lowQualityAuditTrailImage: Swift.String, sessionId: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OitiNetwork.FCManager3DLivenessResultCallback)
  func postSDKStatus(of payload: Foundation.Data, with baseUrl: Swift.String, consumerKey: Swift.String)
  func postPayload(_ payload: Foundation.Data, endpoint: Swift.String, baseUrl: Swift.String, consumerKey: Swift.String, completion: @escaping OitiNetwork.FCManagerPayloadCallback)
  func deviceIntelligenceToken(consumerKey: Swift.String, from baseUrl: Swift.String, withAppKey appKey: Swift.String, completion: @escaping (Swift.Result<Swift.String, any Swift.Error>, Swift.Int) -> Swift.Void)
  func deviceIntelligenceEventData(consumerKey: Swift.String, from baseUrl: Swift.String, withToken deviceToken: Swift.String, save eventsData: Foundation.Data, completion: @escaping (Swift.Result<Swift.String, any Swift.Error>, Swift.Int) -> Swift.Void)
  func deviceIntelligenceClose(consumerKey: Swift.String, from baseUrl: Swift.String, withToken deviceToken: Swift.String, completion: @escaping (Swift.Result<Swift.String, any Swift.Error>, Swift.Int) -> Swift.Void)
  func credential(consumerKey: Swift.String, user: Swift.String, passcode: Swift.String, completion: @escaping OitiNetwork.FCManagerResultCallback)
  func generateAppkey(consumerKey: Swift.String, user: Swift.String, token: Swift.String, cpf: Swift.String, name: Swift.String, birthdate: Swift.String, completion: @escaping OitiNetwork.FCManagerResultCallback)
  func generateAppkey(consumerKey: Swift.String, user userProvided: Swift.String?, passcode passcodeProvided: Swift.String?, cpf: Swift.String, name: Swift.String, birthdate: Swift.String, completion: @escaping OitiNetwork.FCManagerAppKeyCallback)
}
public struct FCPrivateKeyModel {
  public var token: Swift.String?
  public var expires: Swift.String?
}
public struct FCResultModel : Swift.Decodable {
  public var chkey: Swift.String?
  public var snapNumber: Swift.Int?
  public var snapFrequenceInMillis: Swift.Int?
  public var challenges: [OitiNetwork.FCChallengeModel]?
  public func totalNumberOfPictures() -> Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
public struct FCSessionModel : Swift.Decodable {
  public var appkey: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct FCSession3DModel : Swift.Decodable {
  public let sessionToken: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct FCInitializationModel : Swift.Decodable {
  public var productionKey: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct FCTypeFaceModel : Swift.Decodable {
  public var codigo: Swift.String?
  public var imagem: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct FCUserModel {
  public var user: Swift.String?
  public var pass: Swift.String?
  public var cpf: Swift.String?
  public var name: Swift.String?
  public var birth: Swift.String?
  public var privateKey: Swift.String?
  public var image: UIKit.UIImage?
  public init(_ user: Swift.String, _ pass: Swift.String, _ cpf: Swift.String, _ name: Swift.String, _ birth: Swift.String, _ overlapImage: UIKit.UIImage? = nil)
}
public struct FCValidCaptchaModel : Swift.Decodable {
  public var valid: Swift.Bool?
  public var codID: Swift.Double?
  public var cause: Swift.String?
  public var uidProtocol: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public func fatalError(_ message: @autoclosure () -> Swift.String = "", file: Swift.StaticString = #file, line: Swift.UInt = #line) -> Swift.Never
public struct FatalErrorUtil {
  public static func replaceFatalError(closure: @escaping (Swift.String, Swift.StaticString, Swift.UInt) -> Swift.Void)
  public static func restoreFatalError()
}
public struct Liveness3DSuccess : Swift.Decodable {
  public var valid: Swift.Bool?
  public var codID: Swift.Double?
  public var cause: Swift.String?
  public var protocolo: Swift.String?
  public var scanResultBlob: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
extension OitiNetwork.Environment : Swift.Equatable {}
extension OitiNetwork.Environment : Swift.Hashable {}
extension OitiNetwork.Environment : Swift.RawRepresentable {}
